Gitgub: 
https://github.com/RyuminVadim/CS

Программы:
SinOne_double.c программа с типом данных double
SinOne_float.c программа с типом данных float

Компилятор:
 pgcc для GPU
 gcc для CPU

Суммарное время выполнения циклов:
 GPU (us):
  double: 6.533
  float: 3.281
 CPU(ms):
  double: 63.3
  float: 63.3

Общее время работы программ:
 GPU(us):
  double: 41
  float: 38
 CPU(ms):
  double: 63.33
  float: 63.3

результат программы:
 GPU:
  double: 0.0000000000000000000000000
  float: 0.0000000000000000000000000
 CPU:
  double: 0.0000006819764746870193085
  float: -0.2138943076133728027343750

программа на графисеском ядре выполняется быстрее.

*Код программы - SinOne_double.c

#include <stdio.h>
#include <math.h>
#include <time.h> 

#define lens 10000000

float Pi = 3.14159265 * 2 / lens;
float arrsin[lens];
float sum = 0;

void create_sun() {
#pragma acc kernels
    for (int i = 0; i < lens; i++)
        arrsin[i] = sinf(i * Pi);;
}

void sum_sin() {
#pragma acc kernels
    for (int i = 0; i < lens; i++)
        sum += arrsin[i];
}

int main()
{
#pragma acc data create(arrsin[:lens]) copy (sum) copyin(Pi)
    create_sun();
    sum_sin();
    printf("sum = %.25f \n", sum);
    return 0;
}



-------------------------------------------------


*Код программы - SinOne_double.c

#include <stdio.h>
#include <math.h>

#define lens 10000000

double Pi = 3.14159265 * 2 / lens;
double arrsin[lens];
double sum = 0;

void create_sin() {
#pragma acc kernels
    for (int i = 0; i < lens; i++)
        arrsin[i] = sin(i * Pi);;
}

void sum_sin() {
#pragma acc kernels
    for (int i = 0; i < lens; i++)
        sum += arrsin[i];
}

int main()
{
#pragma acc data create(arrsin[:lens]) copy (sum) copyin(Pi)
    create_sin();
    sum_sin();
    printf("sum = %.25lf\n", sum);
    return 0;
}




